// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class NFTCreate extends ethereum.Event {
  get params(): NFTCreate__Params {
    return new NFTCreate__Params(this);
  }
}

export class NFTCreate__Params {
  _event: NFTCreate;

  constructor(event: NFTCreate) {
    this._event = event;
  }

  get creator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get nftAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class NFTDetail extends ethereum.Event {
  get params(): NFTDetail__Params {
    return new NFTDetail__Params(this);
  }
}

export class NFTDetail__Params {
  _event: NFTDetail;

  constructor(event: NFTDetail) {
    this._event = event;
  }

  get nftAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get name(): string {
    return this._event.parameters[1].value.toString();
  }

  get symbol(): string {
    return this._event.parameters[2].value.toString();
  }

  get description(): string {
    return this._event.parameters[3].value.toString();
  }

  get basePrice(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get isListed(): boolean {
    return this._event.parameters[5].value.toBoolean();
  }

  get documents(): Array<string> {
    return this._event.parameters[6].value.toStringArray();
  }

  get imageUri(): string {
    return this._event.parameters[7].value.toString();
  }

  get tokenId(): BigInt {
    return this._event.parameters[8].value.toBigInt();
  }
}

export class NFTTransfer extends ethereum.Event {
  get params(): NFTTransfer__Params {
    return new NFTTransfer__Params(this);
  }
}

export class NFTTransfer__Params {
  _event: NFTTransfer;

  constructor(event: NFTTransfer) {
    this._event = event;
  }

  get sellerAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get buyerAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get nftAddress(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get isTransfer(): boolean {
    return this._event.parameters[3].value.toBoolean();
  }

  get sellingPrice(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class UpdateWhitelistAddress extends ethereum.Event {
  get params(): UpdateWhitelistAddress__Params {
    return new UpdateWhitelistAddress__Params(this);
  }
}

export class UpdateWhitelistAddress__Params {
  _event: UpdateWhitelistAddress;

  constructor(event: UpdateWhitelistAddress) {
    this._event = event;
  }

  get whitelistAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get status(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class NFTManager extends ethereum.SmartContract {
  static bind(address: Address): NFTManager {
    return new NFTManager("NFTManager", address);
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  userNftsMapping(param0: Address): Address {
    let result = super.call(
      "userNftsMapping",
      "userNftsMapping(address):(address)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toAddress();
  }

  try_userNftsMapping(param0: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "userNftsMapping",
      "userNftsMapping(address):(address)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class AddWhitelistAddressCall extends ethereum.Call {
  get inputs(): AddWhitelistAddressCall__Inputs {
    return new AddWhitelistAddressCall__Inputs(this);
  }

  get outputs(): AddWhitelistAddressCall__Outputs {
    return new AddWhitelistAddressCall__Outputs(this);
  }
}

export class AddWhitelistAddressCall__Inputs {
  _call: AddWhitelistAddressCall;

  constructor(call: AddWhitelistAddressCall) {
    this._call = call;
  }

  get _whitelistedAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddWhitelistAddressCall__Outputs {
  _call: AddWhitelistAddressCall;

  constructor(call: AddWhitelistAddressCall) {
    this._call = call;
  }
}

export class BuyNftCall extends ethereum.Call {
  get inputs(): BuyNftCall__Inputs {
    return new BuyNftCall__Inputs(this);
  }

  get outputs(): BuyNftCall__Outputs {
    return new BuyNftCall__Outputs(this);
  }
}

export class BuyNftCall__Inputs {
  _call: BuyNftCall;

  constructor(call: BuyNftCall) {
    this._call = call;
  }

  get nftAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class BuyNftCall__Outputs {
  _call: BuyNftCall;

  constructor(call: BuyNftCall) {
    this._call = call;
  }
}

export class ChangeNftStatusCall extends ethereum.Call {
  get inputs(): ChangeNftStatusCall__Inputs {
    return new ChangeNftStatusCall__Inputs(this);
  }

  get outputs(): ChangeNftStatusCall__Outputs {
    return new ChangeNftStatusCall__Outputs(this);
  }
}

export class ChangeNftStatusCall__Inputs {
  _call: ChangeNftStatusCall;

  constructor(call: ChangeNftStatusCall) {
    this._call = call;
  }

  get nftAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get nftStatus(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class ChangeNftStatusCall__Outputs {
  _call: ChangeNftStatusCall;

  constructor(call: ChangeNftStatusCall) {
    this._call = call;
  }
}

export class CreateNFTContractCall extends ethereum.Call {
  get inputs(): CreateNFTContractCall__Inputs {
    return new CreateNFTContractCall__Inputs(this);
  }

  get outputs(): CreateNFTContractCall__Outputs {
    return new CreateNFTContractCall__Outputs(this);
  }
}

export class CreateNFTContractCall__Inputs {
  _call: CreateNFTContractCall;

  constructor(call: CreateNFTContractCall) {
    this._call = call;
  }

  get name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get symbol(): string {
    return this._call.inputValues[1].value.toString();
  }

  get description(): string {
    return this._call.inputValues[2].value.toString();
  }

  get tokenUri(): string {
    return this._call.inputValues[3].value.toString();
  }

  get basePrice(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get documents(): Array<string> {
    return this._call.inputValues[5].value.toStringArray();
  }
}

export class CreateNFTContractCall__Outputs {
  _call: CreateNFTContractCall;

  constructor(call: CreateNFTContractCall) {
    this._call = call;
  }
}

export class RemoveWhitelistAddressCall extends ethereum.Call {
  get inputs(): RemoveWhitelistAddressCall__Inputs {
    return new RemoveWhitelistAddressCall__Inputs(this);
  }

  get outputs(): RemoveWhitelistAddressCall__Outputs {
    return new RemoveWhitelistAddressCall__Outputs(this);
  }
}

export class RemoveWhitelistAddressCall__Inputs {
  _call: RemoveWhitelistAddressCall;

  constructor(call: RemoveWhitelistAddressCall) {
    this._call = call;
  }

  get _whitelistedAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveWhitelistAddressCall__Outputs {
  _call: RemoveWhitelistAddressCall;

  constructor(call: RemoveWhitelistAddressCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferNftCall extends ethereum.Call {
  get inputs(): TransferNftCall__Inputs {
    return new TransferNftCall__Inputs(this);
  }

  get outputs(): TransferNftCall__Outputs {
    return new TransferNftCall__Outputs(this);
  }
}

export class TransferNftCall__Inputs {
  _call: TransferNftCall;

  constructor(call: TransferNftCall) {
    this._call = call;
  }

  get nftAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class TransferNftCall__Outputs {
  _call: TransferNftCall;

  constructor(call: TransferNftCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
